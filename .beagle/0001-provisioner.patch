From 34a14bf0e9a1658ae6f6587769b929dabc2ac9b2 Mon Sep 17 00:00:00 2001
From: shucheng <shucheng@bd-apaas.com>
Date: Mon, 24 May 2021 21:12:48 +0800
Subject: [PATCH] provisioner

---
 cmd/provisioner/hostpath-provisioner.go      | 14 +++++++-------
 cmd/provisioner/hostpath-provisioner_test.go |  8 ++++----
 tests/pvc_test.go                            |  6 +++---
 3 files changed, 14 insertions(+), 14 deletions(-)

diff --git a/cmd/provisioner/hostpath-provisioner.go b/cmd/provisioner/hostpath-provisioner.go
index 049125c..96e05c4 100644
--- a/cmd/provisioner/hostpath-provisioner.go
+++ b/cmd/provisioner/hostpath-provisioner.go
@@ -39,7 +39,7 @@ import (
 )
 
 const (
-	defaultProvisionerName = "kubevirt.io/hostpath-provisioner"
+	defaultProvisionerName = "bcc.bd-apaas.com/hostpath-provisioner"
 	annStorageProvisioner  = "volume.beta.kubernetes.io/storage-provisioner"
 )
 
@@ -80,7 +80,7 @@ func NewHostPathProvisioner() controller.Provisioner {
 		useNamingPrefix = true
 	}
 	glog.Infof("initiating kubevirt/hostpath-provisioner on node: %s\n", nodeName)
-	provisionerName = "kubevirt.io/hostpath-provisioner"
+	provisionerName = "bcc.bd-apaas.com/hostpath-provisioner"
 	return &hostPathProvisioner{
 		pvDir:           pvDir,
 		identity:        provisionerName,
@@ -93,8 +93,8 @@ var _ controller.Provisioner = &hostPathProvisioner{}
 
 func isCorrectNodeByBindingMode(annotations map[string]string, nodeName string, bindingMode storage.VolumeBindingMode) bool {
 	glog.Infof("isCorrectNodeByBindingMode mode: %s", string(bindingMode))
-	if _, ok := annotations["kubevirt.io/provisionOnNode"]; ok {
-		if isCorrectNode(annotations, nodeName, "kubevirt.io/provisionOnNode") {
+	if _, ok := annotations["bcc.bd-apaas.com/provisionOnNode"]; ok {
+		if isCorrectNode(annotations, nodeName, "bcc.bd-apaas.com/provisionOnNode") {
 			annotations[annStorageProvisioner] = defaultProvisionerName
 			return true
 		}
@@ -154,8 +154,8 @@ func (p *hostPathProvisioner) Provision(options controller.ProvisionOptions) (*v
 			ObjectMeta: metav1.ObjectMeta{
 				Name: options.PVName,
 				Annotations: map[string]string{
-					"hostPathProvisionerIdentity": p.identity,
-					"kubevirt.io/provisionOnNode": p.nodeName,
+					"hostPathProvisionerIdentity":      p.identity,
+					"bcc.bd-apaas.com/provisionOnNode": p.nodeName,
 				},
 			},
 			Spec: v1.PersistentVolumeSpec{
@@ -205,7 +205,7 @@ func (p *hostPathProvisioner) Delete(volume *v1.PersistentVolume) error {
 	if ann != p.identity {
 		return &controller.IgnoredError{Reason: "identity annotation on PV does not match ours"}
 	}
-	if !isCorrectNode(volume.Annotations, p.nodeName, "kubevirt.io/provisionOnNode") {
+	if !isCorrectNode(volume.Annotations, p.nodeName, "bcc.bd-apaas.com/provisionOnNode") {
 		return &controller.IgnoredError{Reason: "identity annotation on pvc does not match ours, not deleting PV"}
 	}
 
diff --git a/cmd/provisioner/hostpath-provisioner_test.go b/cmd/provisioner/hostpath-provisioner_test.go
index 6ea3953..65500e8 100644
--- a/cmd/provisioner/hostpath-provisioner_test.go
+++ b/cmd/provisioner/hostpath-provisioner_test.go
@@ -32,7 +32,7 @@ import (
 func getKubevirtNodeAnnotation(value string) map[string]string {
 	annotation := make(map[string]string)
 	if value != "" {
-		annotation["kubevirt.io/provisionOnNode"] = value
+		annotation["bcc.bd-apaas.com/provisionOnNode"] = value
 	}
 	return annotation
 }
@@ -82,7 +82,7 @@ func Test_isCorrectNode(t *testing.T) {
 	}
 	for _, tt := range tests {
 		t.Run(tt.name, func(t *testing.T) {
-			if got := isCorrectNode(tt.args.annotations, tt.args.nodeName, "kubevirt.io/provisionOnNode"); got != tt.want {
+			if got := isCorrectNode(tt.args.annotations, tt.args.nodeName, "bcc.bd-apaas.com/provisionOnNode"); got != tt.want {
 				t.Errorf("isCorrectNode() = %v, want %v", got, tt.want)
 			}
 		})
@@ -357,8 +357,8 @@ func createPv(identity, nodeName, dirPath string) *v1.PersistentVolume {
 		ObjectMeta: metav1.ObjectMeta{
 			Name: "pv",
 			Annotations: map[string]string{
-				"hostPathProvisionerIdentity": identity,
-				"kubevirt.io/provisionOnNode": nodeName,
+				"hostPathProvisionerIdentity":      identity,
+				"bcc.bd-apaas.com/provisionOnNode": nodeName,
 			},
 		},
 		Spec: v1.PersistentVolumeSpec{
diff --git a/tests/pvc_test.go b/tests/pvc_test.go
index 2813f51..d7e48ad 100644
--- a/tests/pvc_test.go
+++ b/tests/pvc_test.go
@@ -21,7 +21,7 @@ func TestCreatePVCOnNode1(t *testing.T) {
 	nodes, err := getAllNodes(k8sClient)
 	Expect(err).ToNot(HaveOccurred())
 	annotations := make(map[string]string)
-	annotations["kubevirt.io/provisionOnNode"] = nodes.Items[0].Name
+	annotations["bcc.bd-apaas.com/provisionOnNode"] = nodes.Items[0].Name
 
 	pvc := createPVCDef(ns.Name, "hostpath-provisioner-immediate", annotations)
 	defer func() {
@@ -116,7 +116,7 @@ func TestPVCSize(t *testing.T) {
 	nodes, err := getAllNodes(k8sClient)
 	Expect(err).ToNot(HaveOccurred())
 	annotations := make(map[string]string)
-	annotations["kubevirt.io/provisionOnNode"] = nodes.Items[0].Name
+	annotations["bcc.bd-apaas.com/provisionOnNode"] = nodes.Items[0].Name
 
 	pvc := createPVCDef(ns.Name, "hostpath-provisioner-immediate", annotations)
 	defer func() {
@@ -216,7 +216,7 @@ func getHostpathPVs(allPvs []corev1.PersistentVolume) []corev1.PersistentVolume
 	result := make([]corev1.PersistentVolume, 0)
 	for _, pv := range allPvs {
 		val, ok := pv.GetAnnotations()["pv.kubernetes.io/provisioned-by"]
-		if ok && val == "kubevirt.io/hostpath-provisioner" {
+		if ok && val == "bcc.bd-apaas.com/hostpath-provisioner" {
 			result = append(result, pv)
 		}
 	}
-- 
2.25.1

